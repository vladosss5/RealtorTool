// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealtorTool.Data.Context;

#nullable disable

namespace RealtorTool.Data.Context.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251014145754_AddPhotosTable")]
    partial class AddPhotosTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("PhotoId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Deal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DealDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DealTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ListingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("DealTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ListingId");

                    b.HasIndex("StatusId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Dictionary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.DictionaryValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DictionaryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("DictionaryValues");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("PhotoId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Listing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("ListingTypeId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("RealtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponsibleEmployeeId")
                        .HasColumnType("text");

                    b.Property<string>("StatusId")
                        .HasColumnType("text");

                    b.Property<string>("Terms")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ListingTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RealtyId");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasMaxLength(20971520)
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("RealtyId")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityType");

                    b.HasIndex("IsMain");

                    b.HasIndex("RealtyId");

                    b.HasIndex("SortOrder");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Realty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentRealtyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ParentRealtyId");

                    b.ToTable("Realties", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Apartment", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Realty");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("text");

                    b.Property<string>("BathroomTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("HasBalcony")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLoggia")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("KitchenArea")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LivingArea")
                        .HasColumnType("numeric");

                    b.Property<string>("RenovationTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("numeric");

                    b.HasIndex("BathroomTypeId");

                    b.HasIndex("RenovationTypeId");

                    b.ToTable("Apartments", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Area", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Realty");

                    b.Property<decimal>("Square")
                        .HasColumnType("numeric");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.PrivateHouse", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Realty");

                    b.Property<string>("ConstructionMaterialId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FloorsCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasBasement")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasGarage")
                        .HasColumnType("boolean");

                    b.Property<string>("HeatingTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("numeric");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasIndex("ConstructionMaterialId");

                    b.HasIndex("HeatingTypeId");

                    b.ToTable("PrivateHouses", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Client", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Deal", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Client", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "DealType")
                        .WithMany()
                        .HasForeignKey("DealTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("DealType");

                    b.Navigation("Employee");

                    b.Navigation("Listing");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.DictionaryValue", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Dictionary", "Dictionary")
                        .WithMany()
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Employee", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Listing", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "ListingType")
                        .WithMany()
                        .HasForeignKey("ListingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.Client", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", "Realty")
                        .WithMany("Listings")
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Employee", "ResponsibleEmployee")
                        .WithMany()
                        .HasForeignKey("ResponsibleEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Currency");

                    b.Navigation("ListingType");

                    b.Navigation("Owner");

                    b.Navigation("Realty");

                    b.Navigation("ResponsibleEmployee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Photo", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Realty", null)
                        .WithMany("Photos")
                        .HasForeignKey("RealtyId");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Realty", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", "ParentRealty")
                        .WithMany("ChildRealties")
                        .HasForeignKey("ParentRealtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("ParentRealty");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Apartment", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "BathroomType")
                        .WithMany()
                        .HasForeignKey("BathroomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.Apartment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "RenovationType")
                        .WithMany()
                        .HasForeignKey("RenovationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BathroomType");

                    b.Navigation("RenovationType");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Area", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Realty", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.PrivateHouse", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "ConstructionMaterial")
                        .WithMany()
                        .HasForeignKey("ConstructionMaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "HeatingType")
                        .WithMany()
                        .HasForeignKey("HeatingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.PrivateHouse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstructionMaterial");

                    b.Navigation("HeatingType");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Realty", b =>
                {
                    b.Navigation("ChildRealties");

                    b.Navigation("Listings");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
