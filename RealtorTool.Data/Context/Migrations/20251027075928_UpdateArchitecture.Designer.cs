// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealtorTool.Data.Context;

#nullable disable

namespace RealtorTool.Data.Context.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251027075928_UpdateArchitecture")]
    partial class UpdateArchitecture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("District");

                    b.HasIndex("PostalCode");

                    b.HasIndex("City", "District", "Street", "HouseNumber", "BuildingNumber")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.ClientRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalRequirements")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DealId")
                        .HasColumnType("text");

                    b.Property<string>("DesiredLocation")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListingId")
                        .HasColumnType("text");

                    b.Property<string>("MatchedRequestId")
                        .HasColumnType("text");

                    b.Property<decimal?>("MaxArea")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinArea")
                        .HasColumnType("numeric");

                    b.Property<int?>("MinRooms")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DealId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ListingId");

                    b.HasIndex("MatchedRequestId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("Status", "Type");

                    b.ToTable("ClientRequests");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Deal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DealDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DealTypeId")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ListingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("DealDate");

                    b.HasIndex("DealTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinalPrice");

                    b.HasIndex("ListingId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusId", "DealDate");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.DealParticipant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DealId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientRequestId");

                    b.HasIndex("Role");

                    b.HasIndex("DealId", "ClientRequestId")
                        .IsUnique();

                    b.ToTable("DealParticipants");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Dictionary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.DictionaryValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DictionaryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.HasIndex("Value");

                    b.HasIndex("DictionaryId", "Value")
                        .IsUnique();

                    b.ToTable("DictionaryValues");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Listing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("ListingTypeId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("RealtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponsibleEmployeeId")
                        .HasColumnType("text");

                    b.Property<string>("StatusId")
                        .HasColumnType("text");

                    b.Property<string>("Terms")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ListingTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Price");

                    b.HasIndex("RealtyId");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusId", "CreatedDate");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasMaxLength(20971520)
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsMain");

                    b.HasIndex("SortOrder");

                    b.ToTable("Photos", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Realty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentRealtyId")
                        .HasColumnType("text");

                    b.Property<int>("RealtyType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("IsActive");

                    b.HasIndex("ParentRealtyId");

                    b.HasIndex("RealtyType");

                    b.ToTable("Realties", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Views.PotentialMatch", b =>
                {
                    b.Property<string>("BuyRequestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("buy_request_id");

                    b.Property<int>("BuyType")
                        .HasColumnType("integer")
                        .HasColumnName("buy_type");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("DesiredLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desired_location");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<decimal>("ListingPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("listing_price");

                    b.Property<decimal?>("MaxArea")
                        .HasColumnType("numeric")
                        .HasColumnName("max_area");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("max_price");

                    b.Property<decimal?>("MinArea")
                        .HasColumnType("numeric")
                        .HasColumnName("min_area");

                    b.Property<int?>("MinRooms")
                        .HasColumnType("integer")
                        .HasColumnName("min_rooms");

                    b.Property<int>("RealtyType")
                        .HasColumnType("integer")
                        .HasColumnName("realty_type");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("integer")
                        .HasColumnName("rooms_count");

                    b.Property<string>("SellRequestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sell_request_id");

                    b.Property<int>("SellType")
                        .HasColumnType("integer")
                        .HasColumnName("sell_type");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("numeric")
                        .HasColumnName("total_area");

                    b.ToTable((string)null);

                    b.ToView("potential_matches", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.ClientPhoto", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Photo");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientPhotos", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.EmployeePhoto", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Photo");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeePhotos", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.RealtyPhoto", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Photo");

                    b.Property<string>("RealtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("RealtyId");

                    b.ToTable("RealtyPhotos", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Apartment", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Realty");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("text");

                    b.Property<string>("BathroomTypeId")
                        .HasColumnType("text");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("HasBalcony")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLoggia")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("KitchenArea")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LivingArea")
                        .HasColumnType("numeric");

                    b.Property<string>("RenovationTypeId")
                        .HasColumnType("text");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("integer");

                    b.HasIndex("BathroomTypeId");

                    b.HasIndex("Floor");

                    b.HasIndex("RenovationTypeId");

                    b.HasIndex("RoomsCount");

                    b.HasIndex("TotalArea");

                    b.ToTable("Apartments", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Area", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Realty");

                    b.Property<bool>("HasUtilities")
                        .HasColumnType("boolean");

                    b.Property<string>("LandCategoryId")
                        .HasColumnType("text");

                    b.Property<decimal>("Square")
                        .HasColumnType("numeric");

                    b.HasIndex("LandCategoryId");

                    b.HasIndex("Square");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.PrivateHouse", b =>
                {
                    b.HasBaseType("RealtorTool.Core.DbEntities.Realty");

                    b.Property<string>("ConstructionMaterialId")
                        .HasColumnType("text");

                    b.Property<int?>("FloorsCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasBasement")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasGarage")
                        .HasColumnType("boolean");

                    b.Property<string>("HeatingTypeId")
                        .HasColumnType("text");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasIndex("ConstructionMaterialId");

                    b.HasIndex("FloorsCount");

                    b.HasIndex("HeatingTypeId");

                    b.HasIndex("RoomsCount");

                    b.HasIndex("YearBuilt");

                    b.ToTable("PrivateHouses", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.ClientRequest", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Deal", "Deal")
                        .WithMany()
                        .HasForeignKey("DealId");

                    b.HasOne("RealtorTool.Core.DbEntities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Listing", "Listing")
                        .WithMany("ClientRequests")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.ClientRequest", "MatchedRequest")
                        .WithMany()
                        .HasForeignKey("MatchedRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Deal");

                    b.Navigation("Employee");

                    b.Navigation("Listing");

                    b.Navigation("MatchedRequest");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Deal", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Client", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "DealType")
                        .WithMany()
                        .HasForeignKey("DealTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("DealType");

                    b.Navigation("Employee");

                    b.Navigation("Listing");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.DealParticipant", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.ClientRequest", "ClientRequest")
                        .WithMany()
                        .HasForeignKey("ClientRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Deal", "Deal")
                        .WithMany("Participants")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientRequest");

                    b.Navigation("Deal");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.DictionaryValue", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Dictionary", "Dictionary")
                        .WithMany()
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Listing", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "ListingType")
                        .WithMany()
                        .HasForeignKey("ListingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.Client", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", "Realty")
                        .WithMany("Listings")
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Employee", "ResponsibleEmployee")
                        .WithMany()
                        .HasForeignKey("ResponsibleEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Currency");

                    b.Navigation("ListingType");

                    b.Navigation("Owner");

                    b.Navigation("Realty");

                    b.Navigation("ResponsibleEmployee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Realty", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", "ParentRealty")
                        .WithMany("ChildRealties")
                        .HasForeignKey("ParentRealtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("ParentRealty");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.ClientPhoto", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Client", "Client")
                        .WithOne("Photo")
                        .HasForeignKey("RealtorTool.Core.DbEntities.ClientPhoto", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Photo", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.ClientPhoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.EmployeePhoto", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Employee", "Employee")
                        .WithOne("Photo")
                        .HasForeignKey("RealtorTool.Core.DbEntities.EmployeePhoto", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Photo", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.EmployeePhoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.RealtyPhoto", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Photo", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.RealtyPhoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", "Realty")
                        .WithMany("Photos")
                        .HasForeignKey("RealtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realty");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Apartment", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "BathroomType")
                        .WithMany()
                        .HasForeignKey("BathroomTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.Apartment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "RenovationType")
                        .WithMany()
                        .HasForeignKey("RenovationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BathroomType");

                    b.Navigation("RenovationType");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Area", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.Realty", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "LandCategory")
                        .WithMany()
                        .HasForeignKey("LandCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LandCategory");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.PrivateHouse", b =>
                {
                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "ConstructionMaterial")
                        .WithMany()
                        .HasForeignKey("ConstructionMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.DictionaryValue", "HeatingType")
                        .WithMany()
                        .HasForeignKey("HeatingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorTool.Core.DbEntities.Realty", null)
                        .WithOne()
                        .HasForeignKey("RealtorTool.Core.DbEntities.PrivateHouse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstructionMaterial");

                    b.Navigation("HeatingType");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Client", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Deal", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Employee", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Listing", b =>
                {
                    b.Navigation("ClientRequests");
                });

            modelBuilder.Entity("RealtorTool.Core.DbEntities.Realty", b =>
                {
                    b.Navigation("ChildRealties");

                    b.Navigation("Listings");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
