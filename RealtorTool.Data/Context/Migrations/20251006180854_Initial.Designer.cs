// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealtorTool.Data.Context;

#nullable disable

namespace RealtorTool.Data.Context.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251006180854_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValueSql("'Россия'::character varying");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("numeric(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("numeric(11,8)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AddressId")
                        .HasName("Addresses_pkey");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApartmentId"));

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasBalcony")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("HasLoggia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("KitchenArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("LivingArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("RenovationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("ApartmentId")
                        .HasName("Apartments_pkey");

                    b.HasIndex(new[] { "BuildingId" }, "IX_Apartments_BuildingId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.AssignmentHistory", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime?>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("DealId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ListingId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("RequestId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UnassignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AssignmentId")
                        .HasName("AssignmentHistory_pkey");

                    b.HasIndex(new[] { "DealId" }, "IX_AssignmentHistory_DealId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_AssignmentHistory_EmployeeId");

                    b.HasIndex(new[] { "ListingId" }, "IX_AssignmentHistory_ListingId");

                    b.HasIndex(new[] { "RequestId" }, "IX_AssignmentHistory_RequestId");

                    b.ToTable("AssignmentHistory", (string)null);
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuildingId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("ConstructionMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Floors")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasElevator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("HasParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasKey("BuildingId")
                        .HasName("Buildings_pkey");

                    b.HasIndex(new[] { "AddressId" }, "IX_Buildings_AddressId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PassportSeries")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("RegistrationAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ClientId")
                        .HasName("Clients_pkey");

                    b.HasIndex("RegistrationAddressId");

                    b.HasIndex(new[] { "Email" }, "Unique_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Unique_Phone")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.ClientRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasBalcony")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasParking")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("MaxFloor")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaxPrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)");

                    b.Property<int?>("MaxRooms")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("MinFloor")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinPrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)");

                    b.Property<int?>("MinRooms")
                        .HasColumnType("integer");

                    b.Property<string>("OtherPreferences")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("PreferredDistricts")
                        .HasColumnType("text[]");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("RequestId")
                        .HasName("ClientRequests_pkey");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientRequests_ClientId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_ClientRequests_EmployeeId");

                    b.HasIndex(new[] { "PropertyType" }, "IX_ClientRequests_PropertyType");

                    b.HasIndex(new[] { "Status" }, "IX_ClientRequests_Status");

                    b.ToTable("ClientRequests");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Deal", b =>
                {
                    b.Property<int>("DealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DealId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CommissionAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("DealDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("DealStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValueSql("'InProgress'::character varying");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("FinalPrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)");

                    b.Property<int>("ListingId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("RequestId")
                        .HasColumnType("integer");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.HasKey("DealId")
                        .HasName("Deals_pkey");

                    b.HasIndex("RequestId");

                    b.HasIndex(new[] { "BuyerId" }, "IX_Deals_BuyerId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Deals_EmployeeId");

                    b.HasIndex(new[] { "ListingId" }, "IX_Deals_ListingId");

                    b.HasIndex(new[] { "SellerId" }, "IX_Deals_SellerId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<decimal?>("CommissionRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Salt")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("EmployeeId")
                        .HasName("Employees_pkey");

                    b.HasIndex(new[] { "Email" }, "Unique_Employee_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Unique_Employee_Phone")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.LandPlot", b =>
                {
                    b.Property<int>("LandPlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LandPlotId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Area")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("CadastralNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("HasUtilities")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UtilitiesDescription")
                        .HasColumnType("text");

                    b.Property<string>("ZoningType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("LandPlotId")
                        .HasName("LandPlots_pkey");

                    b.HasIndex(new[] { "AddressId" }, "IX_LandPlots_AddressId");

                    b.HasIndex(new[] { "CadastralNumber" }, "LandPlots_CadastralNumber_key")
                        .IsUnique();

                    b.ToTable("LandPlots");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.PrivateHouse", b =>
                {
                    b.Property<int>("PrivateHouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrivateHouseId"));

                    b.Property<string>("ConstructionMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FloorsCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("HasGarage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("HeatingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LandPlotId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasKey("PrivateHouseId")
                        .HasName("PrivateHouses_pkey");

                    b.HasIndex(new[] { "LandPlotId" }, "IX_PrivateHouses_LandPlotId");

                    b.ToTable("PrivateHouses");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.PropertyListing", b =>
                {
                    b.Property<int>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListingId"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Commission")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValueSql("'RUB'::character varying");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsExclusive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("LandPlotId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ListingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<decimal?>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)");

                    b.Property<int?>("PrivateHouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ListingId")
                        .HasName("PropertyListings_pkey");

                    b.HasIndex(new[] { "ListingId" }, "IX_PropertyListings_ActiveRents")
                        .HasFilter("(((\"Status\")::text = 'Active'::text) AND ((\"TransactionType\")::text = 'Rent'::text))");

                    b.HasIndex(new[] { "ListingId" }, "IX_PropertyListings_ActiveSales")
                        .HasFilter("(((\"Status\")::text = 'Active'::text) AND ((\"TransactionType\")::text = 'Sale'::text))");

                    b.HasIndex(new[] { "ApartmentId" }, "IX_PropertyListings_ApartmentId")
                        .HasFilter("(\"ApartmentId\" IS NOT NULL)");

                    b.HasIndex(new[] { "ClientId" }, "IX_PropertyListings_ClientId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_PropertyListings_EmployeeId");

                    b.HasIndex(new[] { "LandPlotId" }, "IX_PropertyListings_LandPlotId")
                        .HasFilter("(\"LandPlotId\" IS NOT NULL)");

                    b.HasIndex(new[] { "PrivateHouseId" }, "IX_PropertyListings_PrivateHouseId")
                        .HasFilter("(\"PrivateHouseId\" IS NOT NULL)");

                    b.HasIndex(new[] { "Status" }, "IX_PropertyListings_Status");

                    b.HasIndex(new[] { "TransactionType" }, "IX_PropertyListings_TransactionType");

                    b.ToTable("PropertyListings");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Apartment", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Building", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Apartments_BuildingId_fkey");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.AssignmentHistory", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Deal", "Deal")
                        .WithMany("AssignmentHistories")
                        .HasForeignKey("DealId")
                        .HasConstraintName("AssignmentHistory_DealId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.Employee", "Employee")
                        .WithMany("AssignmentHistories")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("AssignmentHistory_EmployeeId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.PropertyListing", "Listing")
                        .WithMany("AssignmentHistories")
                        .HasForeignKey("ListingId")
                        .HasConstraintName("AssignmentHistory_ListingId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.ClientRequest", "Request")
                        .WithMany("AssignmentHistories")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("AssignmentHistory_RequestId_fkey");

                    b.Navigation("Deal");

                    b.Navigation("Employee");

                    b.Navigation("Listing");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Building", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Address", "Address")
                        .WithMany("Buildings")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("Buildings_AddressId_fkey");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Client", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Address", "RegistrationAddress")
                        .WithMany("Clients")
                        .HasForeignKey("RegistrationAddressId")
                        .HasConstraintName("Clients_RegistrationAddressId_fkey");

                    b.Navigation("RegistrationAddress");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.ClientRequest", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Client", "Client")
                        .WithMany("ClientRequests")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("ClientRequests_ClientId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.Employee", "Employee")
                        .WithMany("ClientRequests")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("ClientRequests_EmployeeId_fkey");

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Deal", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Client", "Buyer")
                        .WithMany("DealBuyers")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("Deals_BuyerId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.Employee", "Employee")
                        .WithMany("Deals")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("Deals_EmployeeId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.PropertyListing", "Listing")
                        .WithMany("Deals")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("Deals_ListingId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.ClientRequest", "Request")
                        .WithMany("Deals")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("Deals_RequestId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.Client", "Seller")
                        .WithMany("DealSellers")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("Deals_SellerId_fkey");

                    b.Navigation("Buyer");

                    b.Navigation("Employee");

                    b.Navigation("Listing");

                    b.Navigation("Request");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.LandPlot", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Address", "Address")
                        .WithMany("LandPlots")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("LandPlots_AddressId_fkey");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.PrivateHouse", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.LandPlot", "LandPlot")
                        .WithMany("PrivateHouses")
                        .HasForeignKey("LandPlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PrivateHouses_LandPlotId_fkey");

                    b.Navigation("LandPlot");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.PropertyListing", b =>
                {
                    b.HasOne("RealtorTool.Core.Models.DbModels.Apartment", "Apartment")
                        .WithMany("PropertyListings")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("PropertyListings_ApartmentId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.Client", "Client")
                        .WithMany("PropertyListings")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("PropertyListings_ClientId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.Employee", "Employee")
                        .WithMany("PropertyListings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("PropertyListings_EmployeeId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.LandPlot", "LandPlot")
                        .WithMany("PropertyListings")
                        .HasForeignKey("LandPlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("PropertyListings_LandPlotId_fkey");

                    b.HasOne("RealtorTool.Core.Models.DbModels.PrivateHouse", "PrivateHouse")
                        .WithMany("PropertyListings")
                        .HasForeignKey("PrivateHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("PropertyListings_PrivateHouseId_fkey");

                    b.Navigation("Apartment");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("LandPlot");

                    b.Navigation("PrivateHouse");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Address", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Clients");

                    b.Navigation("LandPlots");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Apartment", b =>
                {
                    b.Navigation("PropertyListings");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Building", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Client", b =>
                {
                    b.Navigation("ClientRequests");

                    b.Navigation("DealBuyers");

                    b.Navigation("DealSellers");

                    b.Navigation("PropertyListings");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.ClientRequest", b =>
                {
                    b.Navigation("AssignmentHistories");

                    b.Navigation("Deals");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Deal", b =>
                {
                    b.Navigation("AssignmentHistories");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.Employee", b =>
                {
                    b.Navigation("AssignmentHistories");

                    b.Navigation("ClientRequests");

                    b.Navigation("Deals");

                    b.Navigation("PropertyListings");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.LandPlot", b =>
                {
                    b.Navigation("PrivateHouses");

                    b.Navigation("PropertyListings");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.PrivateHouse", b =>
                {
                    b.Navigation("PropertyListings");
                });

            modelBuilder.Entity("RealtorTool.Core.Models.DbModels.PropertyListing", b =>
                {
                    b.Navigation("AssignmentHistories");

                    b.Navigation("Deals");
                });
#pragma warning restore 612, 618
        }
    }
}
